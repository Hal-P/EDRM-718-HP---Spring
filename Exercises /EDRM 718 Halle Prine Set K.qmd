---
Author: "Halle Prine"
title: "EDRM 718 Exercise Set K"
format: html
---

*Put your name as the author of this notebook in the YAML, then complete each of the items below. Make sure that your notebook is neat and organized and that all your code chunks run without error, even after clearing the environment. (Six points per item)*

***

*These exercises will lead you through the steps of preparing the **College Study Data* *for analysis by cleaning it and importing it into R.*
***

**1. Import the *College Study Data* into a tibble and store the problems in a second tibble.**

```{r echo=FALSE}

# Load necessary libraries
library(tidyverse)
library(here)
library(readr)
library(readxl)

# Import the College Study Data into a tibble
college_data <- read.csv(here("Data", "College Study Data.csv")) %>%
  as_tibble()  # Convert to tibble

# Identify potential problems (missing values, column types)
problems_data <- tibble(
  column = names(college_data),
  n_missing = sapply(college_data, function(x) sum(is.na(x))),
  data_type = sapply(college_data, class)  # Store column data types
)

# Check the class of the imported data
class(college_data)
class(problems_data)

# View results
college_data
problems_data

##########
# Excel #
##########

# Import the College Study Data from an Excel file into a tibble
college_data <- read_excel(here("Data", "College Study Data.xlsx")) %>%
  as_tibble()  # Convert to tibble

# Identify potential problems (missing values, column types)
problems_data <- tibble(
  column = names(college_data),
  n_missing = sapply(college_data, function(x) sum(is.na(x))),
  data_type = sapply(college_data, class)  # Store column data types
)

# Check the class of the imported data
class(college_data)
class(problems_data)

# View results
college_data
problems_data

```


***

**2. Display the rows in the imported data that contained identified problems. (Hint: Every row is considered during the import, including the header row, so row numbers in your imported data will not match the original row numbers that are identified in the problems tibble.)**

```{r echo=FALSE}

# Identify problematic rows based on missing values
problematic_rows <- college_data %>%
  filter(if_any(everything(), is.na)) # Select rows with missing values

# Display problematic rows
problematic_rows

##########
# Excel #
##########

# Display rows with identified problems (rows with any missing values)
problematic_rows <- college_data %>%
  filter(if_any(everything(), ~ is.na(.)))  # Filter rows with missing values

class(problems_data)

problematic_rows

```


***

**3. Display these same rows in the original data, prior to import. (Hint: The basic R read.csv() function does not look for problems or make adjustments, so one trick is to read the same data into another object using this function.)**

```{r echo=FALSE}

# Re-import the original data using read.csv() to preserve raw format (no adjustments)
original_data <- read.csv(here("Data", "College Study Data.csv"), stringsAsFactors = FALSE)

# Extract problematic rows from the original data using row indices from the tibble
problematic_row_indices <- which(rownames(original_data) %in% rownames(problematic_rows))

# Use those indices to extract the problematic rows
original_problematic_rows <- original_data[problematic_row_indices, ]

# Display the problematic rows from the original data
original_problematic_rows

##########
# Excel #
##########

# Re-import the original data without adjustments, using the basic read_excel()
original_data <- read_excel(here("Data", "College Study Data.xlsx"), col_names = TRUE)

# Identify rows with missing values in the original data (prior to any adjustments)
problematic_rows_original <- original_data %>%
  filter(if_any(everything(), ~ is.na(.)))  # Filter rows with missing values

# Display the problematic rows from the original data
problematic_rows_original

```


***

**4. Compare the two different displays of problem rows. For each row, state what the problem appears to have been and explain how the *read_csv()* function addressed the problem.**

```{r echo=FALSE}

# Compare the problematic rows from both imports
head(original_problematic_rows)  # Rows from read.csv()
head(problematic_rows)  # Rows from read_csv() tibble

##########
# Excel #
##########

# Identify rows with missing values in the original data (prior to any adjustments)
problematic_rows_original <- original_data %>%
  filter(if_any(everything(), ~ is.na(.)))

# Identify rows with missing values in the tibble version of the data
problematic_rows_tibble <- college_data %>%
  filter(if_any(everything(), ~ is.na(.)))

# Compare the problematic rows from the original data and the tibble
problematic_rows_original
problematic_rows_tibble

```

***

**5. For each problem row, explain whether you agree or disagree with how *read_csv()* handled the issue. Briefly defend each agreement and/or disagreement.**

I agree with how read_excel() handles the data, as it preserves the integrity of the input. However, there are a few areas where automatic adjustments could be handled better, specifically in missing values, column types, and date formats. I mostly disagree with the lack of handling for categorical variables and commas in numbers since the automatic conversion of these would save time and reduce errors in data processing.  

***

**6. If you disagreed with any of the solutions used by the *read_csv()* function, change the data in the problem row(s) to what you believe is correct. Show these row(s) when you are done.**

Based on common issues in excel imports the adjustments I would make would consist of:

1.) Missing Data representation: we need to recognize that -99 indicates missing data not NA. 

2.) Data Types for variables:
- id: numeric or character
- gender: character 
- class: chracter 
- gpa: numeric
- scale1: numeric
-scale 2: numeric

```{r echo=FALSE}
# Re-import the original data without adjustments (assuming the file is Excel)
original_data <- read_excel(here("Data", "College Study Data.xlsx"), col_names = TRUE)

# Problematic rows (assuming this is already identified)
problematic_rows <- original_data %>%
  filter(if_any(everything(), ~ is.na(.)))

# Correcting -99 values as NA
# Replace -99 with NA for scale1, scale2, and GPA (missing data indicator)
original_data$gpa[original_data$gpa == -99] <- NA
original_data$scale1[original_data$scale1 == -99] <- NA
original_data$scale2[original_data$scale2 == -99] <- NA

# Ensuring proper data types
# Convert columns to correct data types:
# Gender and Class should be factors
original_data$gender <- factor(original_data$gender)
original_data$class <- factor(original_data$class)

# GPA should be numeric, already handled, but ensure no issues
original_data$gpa <- as.numeric(original_data$gpa)

# Scale1 and Scale2 should be numeric
original_data$scale1 <- as.numeric(original_data$scale1)
original_data$scale2 <- as.numeric(original_data$scale2)

# If any columns contain commas in numeric values, clean them (assuming there could be commas in scale1 or scale2)
# Remove commas and convert to numeric if necessary (not typical for scales but might be relevant)
original_data$scale1 <- as.numeric(gsub(",", "", original_data$scale1))
original_data$scale2 <- as.numeric(gsub(",", "", original_data$scale2))

# Display the corrected rows with missing values
corrected_problematic_rows <- original_data %>%
  filter(if_any(everything(), ~ is.na(.)))  # Display rows with missing data

# Show corrected rows
corrected_problematic_rows

```

***

**7. Note the types of data that the parse guesser chose for each variable. Identify which of these are incorrect and briefly explain why these are incorrect.**

```{r echo=FALSE}
# Check the structure of the imported data
str(original_data)
```

***

**8. You have already fixed some of the problems, so use the *write_csv()* function to save the data with the revisions you have made to this point. You should never delete original files, so use a different file name.**

```{r echo=FALSE}

# Write the data (from Excel import) to a new CSV file
write_csv(original_data, here("Data", "Revised_College_Study_Data.csv"))

# Confirm the file is written
cat("The revised data has been saved as 'Revised_College_Study_Data.csv'.")


```

***

**9. Clear your environment and read back in the file you just saved. This time specify the *col_types* argument so that each variable is set to the type you believe it should be. Store the problems in a tibble.**

```{r echo=FALSE}
# Clear the environment
rm(list = ls())

# Load necessary libraries
library(readr)
library(tidyverse)

# Specify the column types to be used during import
col_types <- cols(
  id = col_character(),        # id as character to preserve formatting
  gender = col_factor(),       # gender as factor
  class = col_factor(),        # class as factor
  gpa = col_double(),          # gpa as numeric (double)
  scale1 = col_double(),       # scale1 as numeric
  scale2 = col_double()        # scale2 as numeric
)

# Read the CSV file with the specified column types
revised_data <- read_csv(here("Data", "Revised_College_Study_Data.csv"), col_types = col_types)

# Check for potential problems (e.g., missing values, incorrect types)
problems_data <- tibble(
  column = names(revised_data),
  n_missing = sapply(revised_data, function(x) sum(is.na(x))),
  data_type = sapply(revised_data, class)  # Store column data types
)

# Check the structure of the imported data to confirm types
str(revised_data)

# View the problems tibble
problems_data


```

***

**10. As you did before, compare the problem rows with the original data. For each problem, explain what you believe the problem to be and whether you are satisfied with the solution used by *read_csv()*. If not, state how you propose to fix it.**

```{r echo=FALSE}

# Identify the rows with problems (missing values or other issues)
problem_rows <- revised_data[apply(is.na(revised_data), 1, any), ]

# Display the rows with problems
problem_rows

```

***

**11. If you proposed any changes, go ahead an make them and show the result. If not, you can skip this item.**

```{r echo=FALSE}
# Fixing the column types and handling missing values
revised_data <- revised_data %>%
  # Convert 'id' to character
  mutate(id = as.character(id),
         # Convert 'gender' and 'class' to factors
         gender = factor(gender),
         class = factor(class),
         # Handle missing values (if -99 was used as a placeholder for missing)
         gpa = na_if(gpa, -99),
         scale1 = na_if(scale1, -99),
         scale2 = na_if(scale2, -99))

# View the fixed data
revised_data


```

***

**12. Check that the identification numbers have a reasonable range and that they are all unique.**

```{r echo=FALSE}

# Check if 'id' is numeric and if so, check for reasonable range
if (is.numeric(revised_data$id)) {
  min_id <- min(revised_data$id, na.rm = TRUE)
  max_id <- max(revised_data$id, na.rm = TRUE)
  cat("ID Range: ", min_id, "to", max_id, "\n")
} else {
  cat("ID is not numeric, skipping range check.\n")
}

# Check for uniqueness of 'id'
unique_ids <- length(unique(revised_data$id))
total_rows <- nrow(revised_data)
cat("Unique IDs: ", unique_ids, "\n")
cat("Total Rows: ", total_rows, "\n")

# Check if there are any duplicates
if (unique_ids < total_rows) {
  cat("Warning: There are duplicate IDs!\n")
} else {
  cat("All IDs are unique.\n")
}


```

***

**13. When these data were collected some time ago, it was common to consider only two gender types. Check that this is the case for these data. If there are inconsistencies, find the offending rows and display them. (Hint: The *table()* function is helpful when studying categorical data.)**

```{r echo=FALSE}

# Check the distribution of 'gender' values
gender_table <- table(revised_data$gender)
print(gender_table)

# Identify rows with inconsistent 'gender' values (those not "male" or "female")
invalid_gender_rows <- revised_data[!revised_data$gender %in% c("male", "female"), ]

# Display the rows with inconsistent gender values
invalid_gender_rows

```

***

**14. Fix any gender inconsistencies by changing the data in the way you believe makes the most sense. When you are done, display the corrected rows and again check the gender variable.**

```{r echo=FALSE}

# Check the gender distribution before fixing
cat("Original gender distribution:\n")
print(table(revised_data$gender))

# Fixing the gender inconsistencies by correcting common typos
revised_data$gender <- as.character(revised_data$gender)  # Ensure gender is character
revised_data$gender[revised_data$gender == "mal"] <- "male"  # Correct "mal" to "male"
revised_data$gender[revised_data$gender == "fem"] <- "female"  # Correct "fem" to "female"

# Check for any invalid gender entries (other than "male" or "female") and replace with "unknown"
revised_data$gender[!revised_data$gender %in% c("male", "female")] <- "unknown"

# Find and display rows with the corrected gender
corrected_gender_rows <- revised_data[revised_data$gender == "unknown", ]
cat("Corrected gender rows:\n")
print(corrected_gender_rows)

# Check the gender distribution after fixing
cat("Corrected gender distribution:\n")
print(table(revised_data$gender))



```

***

**15. Use a similar procedure to check the *class* variable. If any changes are needed, fix them and then show that you have fixed the problems.**

```{r echo=FALSE}

# Check the distribution of 'class' values before fixing
cat("Original class distribution:\n")
print(table(revised_data$class))

# Fixing the class inconsistencies by correcting common typos
revised_data$class <- as.character(revised_data$class)  # Ensure class is character
revised_data$class[revised_data$class == "freshmen"] <- "freshman"  # Correct "freshmen" to "freshman"
revised_data$class[revised_data$class == "sophmore"] <- "sophomore"  # Correct "sophmore" to "sophomore"

# Check for any invalid class entries (other than known values) and replace with "unknown"
revised_data$class[!revised_data$class %in% c("freshman", "sophomore", "junior", "senior")] <- "unknown"

# Find and display rows with the corrected class
corrected_class_rows <- revised_data[revised_data$class == "unknown", ]
cat("Corrected class rows:\n")
print(corrected_class_rows)

# Check the class distribution after fixing
cat("Corrected class distribution:\n")
print(table(revised_data$class))

```

***

**16. Check the range of the GPA variable. If any of the rows are out of range, decide how to fix each row so that you no longer have out of range data.**

```{r echo=FALSE}
# Check the class of the GPA column
cat("Class of GPA column:\n")
print(class(revised_data$gpa))

# Check for any non-numeric entries in GPA (e.g., text or special characters)
cat("Check for non-numeric entries in GPA:\n")
unique(revised_data$gpa)

# Identify rows with non-numeric GPA values
non_numeric_gpa <- revised_data[!grepl("^\\d*(\\.\\d+)?$", revised_data$gpa), ]
cat("Rows with non-numeric GPA values:\n")
print(non_numeric_gpa)

# Remove any non-numeric entries from the GPA column (replace them with NA)
revised_data$gpa <- as.character(revised_data$gpa)
revised_data$gpa[!grepl("^\\d*(\\.\\d+)?$", revised_data$gpa)] <- NA

# Now, convert the GPA column to numeric
revised_data$gpa <- as.numeric(revised_data$gpa)

# Check the range of the GPA variable again
cat("GPA range after cleaning:\n")
gpa_range_fixed <- range(revised_data$gpa, na.rm = TRUE)
print(gpa_range_fixed)


```

***

**17. Check the scale1 variable and make changes if there are any issues. (Hint: Even though this variable is an integer, there are only five values so that the *table()* function may again prove useful.)**

```{r echo=FALSE}

# Check the distribution of values in scale1
cat("Scale1 value distribution:\n")
scale1_distribution <- table(revised_data$scale1)
print(scale1_distribution)

# Identify rows with values outside the expected range (1 to 5)
invalid_scale1 <- revised_data[revised_data$scale1 < 1 | revised_data$scale1 > 5, ]

# Display rows with invalid values
cat("Rows with invalid scale1 values:\n")
print(invalid_scale1)

# Fix invalid scale1 values by setting them to NA (or another strategy if necessary)
revised_data$scale1[revised_data$scale1 < 1 | revised_data$scale1 > 5] <- NA

# Recheck the distribution of scale1 after fixing
cat("Revised Scale1 value distribution:\n")
scale1_distribution_fixed <- table(revised_data$scale1)
print(scale1_distribution_fixed)

# Display rows with NA in scale1 (which were invalid)
invalid_scale1_fixed <- revised_data[is.na(revised_data$scale1), ]
cat("Rows with fixed scale1 values (now NA):\n")
print(invalid_scale1_fixed)


```

***

**18. Use similar methods to check the scale2 variable and make changes if there are any issues.**

```{r echo=FALSE}

# Check the class of the scale2 variable
cat("Class of scale2 variable:\n")
print(class(revised_data$scale2))

# Inspect unique values in scale2 to identify any unexpected entries
cat("Unique values in scale2 before cleaning:\n")
print(unique(revised_data$scale2))

# If scale2 is not numeric, we will convert it to numeric
revised_data$scale2 <- as.character(revised_data$scale2)  # Convert to character to inspect
revised_data$scale2[!revised_data$scale2 %in% c("1", "2", "3", "4", "5", "6", "7", "8", "9")] <- NA  # Replace non-1-9 values with NA
revised_data$scale2 <- as.numeric(revised_data$scale2)  # Convert back to numeric

# Check the distribution of values in scale2 again
cat("Scale2 value distribution after cleaning:\n")
scale2_distribution <- table(revised_data$scale2)
print(scale2_distribution)

# Identify rows with NA values in scale2 after cleaning
invalid_scale2_fixed <- revised_data[is.na(revised_data$scale2), ]
cat("Rows with invalid scale2 values (now NA):\n")
print(invalid_scale2_fixed)


```

***

**19. Even though you already specified the class of each variable when you read in the data, check these again to make sure they are ready for analysis. (Hint: You may have cleaned up character data for variables that can now become factors.)**

```{r echo=FALSE}

# Check the class of each variable in the dataset
cat("Classes of each variable in the dataset:\n")
print(sapply(revised_data, class))

# Convert gender and class variables to factors if they are not already
revised_data$gender <- as.factor(revised_data$gender)
revised_data$class <- as.factor(revised_data$class)

# Check if GPA, scale1, and scale2 are numeric (if not, convert them)
revised_data$gpa <- as.numeric(revised_data$gpa)
revised_data$scale1 <- as.numeric(revised_data$scale1)
revised_data$scale2 <- as.numeric(revised_data$scale2)

# Check the updated class of each variable after conversion
cat("Updated classes of each variable:\n")
print(sapply(revised_data, class))

# Check for any NAs or issues after conversion
cat("Summary of the dataset after type conversion:\n")
print(summary(revised_data))


```

***

**20. Write your data to a file entitled *College Study Data (Clean).csv*.**

```{r echo=FALSE}

# Save the cleaned data to a new CSV file
write.csv(revised_data, "College Study Data (Clean).csv", row.names = FALSE)

```

***
